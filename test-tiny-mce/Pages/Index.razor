@page "/"


<PageTitle>Index</PageTitle>

@* @using TinyMCE.Blazor *@
@* <Editor  ApiKey="ozihpoooq3q44vzuwhx39jv3qclsufn9nm6irxegwey4rdgd"/> *@

@* @inherits InputTextArea *@
@* @inject IJSRuntime JSRuntime *@
@* *@
@* <textarea @attributes="AdditionalAttributes"   *@
@*        id="@Id" *@
@*        class="@CssClass" *@
@*        value="@CurrentValue"></textarea> *@
@* *@
@* @code {  *@
@*     string _id; *@
@*     [Parameter] *@
@*     public string Id *@
@*     { *@
@*         get => _id ?? $"CKEditor_{uid}"; *@
@*         set => _id = value; *@
@*     } *@
@* *@
@*     readonly string uid = Guid.NewGuid().ToString().ToLower().Replace("-", ""); *@
@* *@
@*     protected override async Task OnAfterRenderAsync(bool firstRender) *@
@*     { *@
@*         if (firstRender) *@
@*             await JSRuntime.InvokeVoidAsync("CKEditorInterop.init", Id, DotNetObjectReference.Create(this)); *@
@* *@
@*         await base.OnAfterRenderAsync(firstRender); *@
@*     } *@
@* *@
@*     [JSInvokable] *@
@*     public Task EditorDataChanged(string data) *@
@*     { *@
@*         CurrentValue = data; *@
@*         StateHasChanged(); *@
@*         return Task.CompletedTask; *@
@*     } *@
@* *@
@*     protected override void Dispose(bool disposing) *@
@*     { *@
@*         JSRuntime.InvokeVoidAsync("CKEditorInterop.destroy", Id); *@
@*         base.Dispose(disposing); *@
@*     } *@
@* } *@


@using Blazored.TextEditor

@* <div class="@(true ? "ql-editor-rtl" : "ql-editor-ltr")"> *@

    <BlazoredTextEditor @ref="@QuillHtml" >
        <ToolbarContent>
            <select class="ql-header">
                <option selected=""></option>
                <option value="1"></option>
                <option value="2"></option>
                <option value="3"></option>
                <option value="4"></option>
                <option value="5"></option>
            </select>
            <span class="ql-formats">
                <button class="ql-bold"></button>
                <button class="ql-italic"></button>
                <button class="ql-underline"></button>
                <button class="ql-strike"></button>
            </span>
            <span class="ql-formats">
                <select class="ql-color"></select>
                <select class="ql-background"></select>
            </span>
            <span class="ql-formats">
                <button class="ql-list" value="ordered"></button>
                <button class="ql-list" value="bullet"></button>
            </span>
            <span class="ql-formats">
                <button class="ql-link"></button>
            </span>
            <span class="ql-formats">
                        <button class="ql-list" value="ordered"></button>
                        <button class="ql-list" value="bullet"></button>
                        <button class="ql-indent" value="-1"></button>
                        <button class="ql-indent" value="+1"></button>
                        <select class="ql-align">
                            <option selected=""></option>
                            <option value="center"></option>
                            <option value="right"></option>
                            <option value="justify"></option>
                        </select>
                    </span>
        </ToolbarContent>
        <EditorContent>
            <h4>This Toolbar works with HTML</h4>
            <a href="http://BlazorHelpWebsite.com">
                BlazorHelpWebsite.com</a>
        </EditorContent>
    </BlazoredTextEditor>
    <br />
    <button class="btn btn-primary" 
            @onclick="GetHTML">Get HTML</button>
    <button class="btn btn-primary"
            @onclick="SetHTML">Set HTML</button>
    <br />
    <div>
        <br />
        @((MarkupString)QuillHTMLContent)
        @QuillHTMLContent
    </div>
    <br />

@code {

    BlazoredTextEditor QuillHtml;
    string QuillHTMLContent;

    public async void GetHTML()
    {
        QuillHTMLContent = await this.QuillHtml.GetHTML();
        var test = (MarkupString)QuillHTMLContent;
        StateHasChanged();
    }

    public async void SetHTML()
    {
        string QuillContent =
            @"<a href='http://BlazorHelpWebsite.com/'>" +
            "<img src='images/BlazorHelpWebsite.gif' /></a>";

        await this.QuillHtml.LoadHTMLContent(QuillContent);
        StateHasChanged();
    }
}